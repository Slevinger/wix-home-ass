{"version":3,"sources":["componenets/StyledComponents.js","componenets/Input.js","componenets/SettingsBox.js","componenets/SingleCell.js","componenets/Loading.js","componenets/Board.js","services/index.js","services/get-list-of-neighbors.js","services/create-board.js","hooks/reducers/boardReducer.js","hooks/useBoard.js","services/traverse-bfs.js","services/queue-service.js","componenets/GameStatus.js","componenets/Main.js","App.js","serviceWorker.js","index.js"],"names":["SettingsBoxContainer","styled","div","Input","input","LabelInputContainer","StyledCell","clicked","superman","css","StyledBoard","countCols","status","StyledBoardContainer","Main","Math","min","countRows","label","props","state","setLoading","setSuperman","createBoard","useState","cols","setCols","rows","setRows","mines","setMines","useEffect","value","onChange","e","Number","target","checked","type","style","transform","onClick","a","setTimeout","indexes","id","count","reveal","flagged","clickCell","toggleFlag","cellValue","endGame","useMemo","color","display","position","textAnchor","alignmentBaseline","className","altKey","LoadingModal","height","width","timeout","fontSize","map","countMines","countFlags","board","neighbors","loading","minesLeft","Loading","length","Object","keys","index","SingleCell","key","posToString","row","col","getListOfNeighbors","match","list","i","max","j","push","cellsLeft","random","forEach","indexesStr","initialState","flaggedMinesCount","reducer","payload","cellToClick","cellToFlag","cellToUnFlag","pick","filter","newBoard","isSuperman","listOfCellsToReaveal","useReducer","dispatch","_tryToWin","additionalCells","addOrRemoveFromFlagsCount","didClickAllOver","notClicked","difference","_flagCell","_unFlagCell","startIndexes","queue","_queue","_visited","pop","splice","obj","peek","getQueue","didVisit","getVisited","isEmpty","Queue","visited","cellsAlreadyVisible","countMinesAroundCells","immediateNeighbors","strIndexes","traverseFrom","replace","marginLeft","boardHook","useBoard","SettingsBox","GameStatus","Board","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b895885f.chunk.js","sourcesContent":["import styled, { css } from \"styled-components\";\n\nconst CELL_WIDTH = 28;\nconst BOARD_CONTAINER_WIDTH = 800;\nconst BOARD_CONTAINER_HEIGHT = 700;\n\nexport const SettingsBoxContainer = styled.div`\n  flex-row: column;\n  display: flex;\n  justify-content: center;\n  padding: 7px;\n  width: 100%;\n  height: 30px;\n  background-color: rgba(0, 0, 0, 0.2);\n`;\n\nexport const Input = styled.input`\n  padding: 5px;\n  font-size: 15px;\n  width: 30px;\n  margin-left: 10px;\n`;\n\nexport const LabelInputContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  font-size: 18px;\n  line-height: 30px;\n  text-align: center;\n  align-items: center;\n  margin-left: 10px;\n  margin-right: 10px;\n`;\n\nexport const StyledCell = styled.div`\n  width: ${CELL_WIDTH}px;\n  height: ${CELL_WIDTH}px;\n  line-height: ${CELL_WIDTH}px;\n  text-align: center;\n  border: solid thin black;\n  background-color: ${({ clicked, superman }) =>\n    clicked ? \"white\" : superman ? \"rgba(0,40,40,0.1)\" : \"rgba(0,10,10,0.2)\"};\n  &:hover {\n    background-color: white;\n    ${({ clicked }) =>\n      !clicked\n        ? css`\n            cursor: pointer;\n          `\n        : \"\"}\n  }\n  .fail-icon {\n    position: absolute;\n    left: -7px;\n    color: red;\n    width: 30px;\n    height: 30px;\n    font-weight: bold;\n  }\n`;\n\nexport const StyledBoard = styled.div`\n  flex-direction: row;\n  display: flex;\n  flex-wrap: wrap;\n  justify-self:center;\n  overflow:auto;\n  width: ${({ countCols }) => countCols * (CELL_WIDTH + 2)}px;\n  ${({ status }) =>\n    status !== \"GAME ON\"\n      ? css`\n          pointer-events: none;\n          opacity: 0.6;\n        `\n      : \"\"}\n  }\n`;\n\nexport const StyledBoardContainer = styled.div`\n  max-width: ${BOARD_CONTAINER_WIDTH}px;\n  max-height: ${BOARD_CONTAINER_HEIGHT}px;\n  box-shadow: 1px 1px 10px 2px;\n\n  overflow: auto;\n`;\n\nexport const Main = styled.div`\n  width: 100%;\n  .game-status-container {\n    text-align: center;\n    justify-self: center;\n    align-self: center;\n    width: 100%;\n    padding: 10px;\n    font-size: 23px;\n    z-index: 10;\n\n    .game-status {\n      background-color: rgba(255, 255, 255, 0.4);\n      display: inline-flex;\n\n      .GAME_ON {\n        color: blue;\n      }\n\n      .WON {\n        color: green;\n      }\n\n      .LOSE {\n        color: red;\n      }\n    }\n  }\n  .board-page {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    margin-top: 40px;\n  }\n`;\n\nexport const StyledScroller = styled.div`\n  position: absolute;\n  width: ${({ countCols }) =>\n    Math.min(countCols * (CELL_WIDTH + 2), BOARD_CONTAINER_WIDTH)}px;\n  height: ${({ countRows }) =>\n    Math.min(countRows * (CELL_WIDTH + 2), BOARD_CONTAINER_HEIGHT)}px;\n`;\n","import React from \"react\";\nimport { Input, LabelInputContainer } from \"./StyledComponents\";\n\nexport default ({ label, ...props }) => (\n  <LabelInputContainer>\n    <text>{label}</text>\n    <Input {...props} />\n  </LabelInputContainer>\n);\n","import React, { useState, useEffect } from \"react\";\nimport Input from \"./Input\";\nimport { SettingsBoxContainer } from \"./StyledComponents\";\n\nexport default ({\n  state: { superman },\n  setLoading,\n  setSuperman,\n  createBoard\n}) => {\n  const [cols, setCols] = useState(20);\n  const [rows, setRows] = useState(20);\n  const [mines, setMines] = useState(12);\n  useEffect(() => {\n    createBoard(rows, cols, mines);\n  }, []);\n  return (\n    <SettingsBoxContainer>\n      <Input\n        label=\"Col Count\"\n        value={cols}\n        onChange={e => {\n          setCols(Number(e.target.value));\n        }}\n      />\n      <Input\n        label=\"Row Count\"\n        value={rows}\n        onChange={e => {\n          setRows(Number(e.target.value));\n        }}\n      />\n      <Input\n        label=\"Mines\"\n        value={mines}\n        onChange={e => {\n          setMines(Number(e.target.value));\n        }}\n      />\n      <Input\n        label=\"SUPERMAN\"\n        checked={superman}\n        type=\"checkbox\"\n        style={{ transform: \"scale(2)\" }}\n        onChange={e => {\n          setSuperman(!superman);\n        }}\n      />\n      <button\n        onClick={async () => {\n          await setLoading(true);\n          setTimeout(async () => {\n            await createBoard(rows, cols, mines);\n            setLoading(false);\n          }, 0);\n        }}\n      >\n        New Game\n      </button>\n    </SettingsBoxContainer>\n  );\n};\n","import React, { useMemo } from \"react\";\nimport { StyledCell } from \"./StyledComponents\";\nimport { FaBomb, FaFlag } from \"react-icons/fa\";\nimport { IoMdClose } from \"react-icons/io\";\nexport default ({\n  indexes,\n  value,\n  id,\n  count,\n  superman,\n  reveal,\n  clicked,\n  flagged,\n  clickCell,\n  toggleFlag,\n  endGame\n}) => {\n  // const [clicked, setClicked] = useState(false);\n  const cellValue = useMemo(() => {\n    if (flagged) {\n      return <FaFlag color=\"red\" />;\n    } else {\n      if (superman || clicked) {\n        if (value) {\n          return (\n            <span style={{ display: \"inline-block\", position: \"relative\" }}>\n              <FaBomb textAnchor=\"middle\" alignmentBaseline=\"middle\" />\n              {clicked && value && (\n                <IoMdClose\n                  textAnchor=\"middle\"\n                  className={\"fail-icon\"}\n                  alignmentBaseline=\"middle\"\n                />\n              )}\n            </span>\n          );\n        } else {\n          if (count > 0) {\n            return count;\n          }\n          return \"\";\n        }\n      }\n    }\n  }, [clicked, superman, value, count, flagged]);\n\n  const onClick = async e => {\n    if (e.altKey) {\n      toggleFlag(indexes);\n    } else {\n      if (!clicked && !flagged) {\n        clickCell(indexes);\n      }\n    }\n  };\n\n  return (\n    <StyledCell\n      onClick={onClick}\n      clicked={clicked}\n      id={id}\n      indexes={indexes}\n      superman={superman}\n    >\n      {cellValue}\n    </StyledCell>\n  );\n};\n","import React from \"react\";\nimport Loader from \"react-loader-spinner\";\nimport styled from \"styled-components\";\n\nconst LoadingModal = styled.div`\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  right: 0;\n  left: 0;\n  background-color: rgba(0, 0, 0, 0.2);\n  align-items: center;\n  display: flex;\n  justify-content: center;\n`;\n\nexport default () => {\n  return (\n    <LoadingModal>\n      <Loader\n        type=\"Puff\"\n        color=\"#00BFFF\"\n        height={100}\n        width={100}\n        timeout={3000} //3 secs\n      />\n      <div style={{ fontSize: \"60px\", color: \"white\" }}>\n        Creating new board ...\n      </div>\n    </LoadingModal>\n  );\n};\n","import React from \"react\";\nimport { StyledBoard, StyledBoardContainer } from \"./StyledComponents\";\nimport SingleCell from \"./SingleCell\";\nimport Loading from \"./Loading\";\n\nexport default ({\n  state: {\n    map,\n    countMines,\n    countFlags,\n    board,\n    clicked,\n    neighbors,\n    flagged,\n    status,\n    superman\n  },\n  loading,\n  endGame,\n  toggleFlag,\n  clickCell,\n  reveal\n}) => {\n  const minesLeft = countMines - countFlags;\n  return (\n    <div className=\"board-page\">\n      {loading && <Loading />}\n      <StyledBoardContainer>\n        {minesLeft === 0 && status !== \"WON\" && (\n          <div style={{ color: \"red\" }}>No More Flags</div>\n        )}\n\n        <StyledBoard\n          status={status}\n          countCols={board[0].length}\n          countRows={board.length}\n        >\n          {Object.keys(map).map((indexes, index) => (\n            <SingleCell\n              endGame={endGame}\n              key={indexes}\n              id={indexes}\n              clicked={clicked[indexes]}\n              clickCell={clickCell}\n              reveal={reveal}\n              flagged={flagged[indexes]}\n              toggleFlag={toggleFlag}\n              count={neighbors[indexes]}\n              indexes={indexes}\n              value={map[indexes]}\n              superman={superman}\n            />\n          ))}\n        </StyledBoard>\n      </StyledBoardContainer>\n    </div>\n  );\n};\n","export const posToString = (row, col) => `row:${row},col:${col}`;\n","import { posToString } from \"./index\";\n\n/*\naccording to matrix dimensions returns an array of cells : [row,col] that are adjacent to cell indexes\n*/\n\nexport const getListOfNeighbors = (indexes, height, width) => {\n  const match = indexes.match(/row:([0-9]+),col:([0-9]+)/);\n  const row = Number(match[1]);\n  const col = Number(match[2]);\n\n  const list = [];\n  for (let i = Math.max(0, row - 1); i <= Math.min(height - 1, row + 1); i++) {\n    for (let j = Math.max(0, col - 1); j <= Math.min(width - 1, col + 1); j++) {\n      list.push([i, j]);\n    }\n  }\n  return list;\n};\n\n// according to cell indexes ,the dimensions of the matrix, and the map telling us is thee a mine for each cell\n// get count the total amunt of mines around each cell\nexport const countMinesAroundCell = (indexes, height, width, map) => {\n  return getListOfNeighbors(indexes, height, width).filter(\n    ([i, j]) => map[posToString(i, j)]\n  ).length;\n};\n","import {\n  countMinesAroundCell,\n  getListOfNeighbors\n} from \"./get-list-of-neighbors\";\nimport { posToString } from \".\";\nimport { resolve } from \"q\";\n\nexport const createBoard = (rows, cols, countMines) => {\n  const map = {}; // a map from cell indexes to its value, (1|0  mine|no mine)  {'row:*,col:*':0|1}\n  const mines = {}; // a map of all the mines from cell indexes to its value, (1  mine)  {'row:*,col:*':1} TODO: remove and use selector\n  const board = []; // a matrix that represents the board was created mainly for debugging, TODO: remove from state\n  let minesLeft = countMines; // to make the mines spread evenly across the board i need to keep track on the amount of mines left to place\n  let cellsLeft = rows * cols; // to make the mines spread evenly across the board i need to keep track on the amount of cells left to place mines in\n\n  for (let i = 0; i < rows; i++) {\n    board.push([]);\n    for (let j = 0; j < cols; j++) {\n      if (minesLeft / cellsLeft >= Math.random()) {\n        // this formula makes sure that i have an even spread of mines across the board\n        mines[posToString(i, j)] = 1; // this can be easily proved using reduction.\n        minesLeft--;\n      }\n\n      map[posToString(i, j)] = mines[posToString(i, j)] || 0;\n      board[i].push(map[posToString(i, j)]);\n      cellsLeft--;\n    }\n  }\n\n  // neighbors : a map from cell indexes to the count of mines around it\n  const neighbors = {};\n  Object.keys(mines).forEach(indexesStr => {\n    const mineNeigbors = getListOfNeighbors(indexesStr, rows, cols);\n    mineNeigbors.forEach(([row, col]) => {\n      neighbors[posToString(row, col)] =\n        (neighbors[posToString(row, col)] || 0) + 1;\n    });\n  });\n\n  return {\n    countMines,\n    width: cols,\n    height: rows,\n    status: \"GAME ON\",\n    clicked: {},\n    board: board,\n    mines: mines,\n    map: map,\n    neighbors: neighbors\n  };\n};\n","import pick from \"lodash/pick\";\n\nexport const initialState = {\n  neighbors: {},\n  flagged: {},\n  map: {},\n  mines: {},\n  board: [],\n  clicked: {},\n  status: \"NOT READY\",\n  superman: false,\n  flaggedMinesCount: 0,\n  countFlags: 0\n};\n\nexport const reducer = (state, { type, payload }) => {\n  switch (type) {\n    case \"clickCell\":\n      const { indexes: cellToClick } = payload;\n      return { ...state, clicked: { ...state.clicked, [cellToClick]: 1 } };\n\n    case \"flagCell\":\n      const { indexes: cellToFlag } = payload;\n      return {\n        ...state,\n        countFlags: state.countFlags + 1,\n        flagged: { ...state.flagged, [cellToFlag]: 1 }\n      };\n    case \"decFlaggedMinesCount\":\n      return {\n        ...state,\n        flaggedMinesCount: state.flaggedMinesCount - 1\n      };\n    case \"incFlaggedMinesCount\":\n      return {\n        ...state,\n        flaggedMinesCount: state.flaggedMinesCount + 1\n      };\n\n    case \"unFlagCell\":\n      const { indexes: cellToUnFlag } = payload;\n      return {\n        ...state,\n        countFlags: state.countFlags - 1,\n        flagged: pick(\n          state.flagged,\n          Object.keys(state.flagged).filter(key => key !== cellToUnFlag)\n        )\n      };\n    case \"reset\":\n      const newBoard = payload;\n      return { ...initialState, ...newBoard };\n    case \"setSuperman\":\n      const { isSuperman } = payload;\n      return { ...state, superman: isSuperman };\n    case \"reveal\":\n      const { listOfCellsToReaveal } = payload;\n      return {\n        ...state,\n        clicked: { ...state.clicked, ...listOfCellsToReaveal }\n      };\n\n    case \"endGame\":\n      const { status } = payload;\n      return { ...state, superman: true, status };\n    case \"gemeWon\":\n      return { ...state, flagged: state.mines, status: \"WON\" };\n    default:\n      return state;\n  }\n};\n","import { useReducer } from \"react\";\nimport { createBoard } from \"../services/create-board\";\nimport { traverseFrom } from \"../services/traverse-bfs\";\nimport difference from \"lodash/difference\";\nimport { posToString } from \"../services\";\nimport { reducer } from \"./reducers/boardReducer\";\nimport { initialState } from \"./reducers/boardReducer\";\n\nexport default () => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const _tryToWin = ({ additionalCells, addOrRemoveFromFlagsCount }) => {\n    const clicked = { ...state.clicked, ...additionalCells }; // combine all clicked cells together\n\n    const countCells = state.height * state.width;\n    let didClickAllOver = false;\n    if (countCells - Object.keys(clicked).length === state.countMines) {\n      const notClicked = Object.keys(state.mines).filter(\n        indexes => !clicked[indexes]\n      );\n      didClickAllOver =\n        difference(notClicked, Object.keys(state.mines)).length === 0;\n    }\n\n    if (\n      didClickAllOver ||\n      state.flaggedMinesCount + addOrRemoveFromFlagsCount === state.countMines\n    ) {\n      dispatch({ type: \"gemeWon\" });\n    }\n  };\n\n  const _decFlaggedMinesCount = () => {\n    dispatch({ type: \"decFlaggedMinesCount\" });\n  };\n\n  const _incFlaggedMinesCount = () => {\n    dispatch({ type: \"incFlaggedMinesCount\" });\n  };\n\n  const clickCell = indexes => {\n    if (state.map[indexes]) {\n      endGame(\"LOSE\");\n    }\n\n    if (!state.neighbors[indexes]) {\n      reveal(indexes);\n    }\n\n    dispatch({ type: \"clickCell\", payload: { indexes } });\n    _tryToWin({\n      addOrRemoveFromFlagsCount: 0,\n      additionalCells: { [indexes]: 1 }\n    });\n  };\n\n  const setSuperman = isSuperman => {\n    dispatch({ type: \"setSuperman\", payload: { isSuperman } });\n  };\n\n  const endGame = status => {\n    dispatch({ type: \"endGame\", payload: { status } });\n  };\n\n  const _flagCell = indexes => {\n    dispatch({ type: \"flagCell\", payload: { indexes } });\n    if (state.mines[indexes]) {\n      _incFlaggedMinesCount();\n      _tryToWin({ addOrRemoveFromFlagsCount: 1, additionalCells: {} });\n    }\n  };\n\n  const _unFlagCell = indexes => {\n    dispatch({ type: \"unFlagCell\", payload: { indexes } });\n    if (state.mines[indexes]) {\n      _decFlaggedMinesCount();\n    }\n  };\n\n  const toggleFlag = indexes => {\n    if (state.flagged[indexes]) {\n      _unFlagCell(indexes);\n    } else {\n      if (Object.keys(state.flagged).length < state.countMines) {\n        _flagCell(indexes);\n      }\n    }\n  };\n\n  const reveal = (row, col) => {\n    debugger;\n    const listOfCellsToReaveal = traverseFrom(posToString(row, col), state);\n    debugger;\n    dispatch({\n      type: \"reveal\",\n      payload: { listOfCellsToReaveal }\n    });\n    _tryToWin({\n      addOrRemoveFromFlagsCount: 0,\n      additionalCells: listOfCellsToReaveal\n    });\n  };\n\n  const reset = async (rows, cols, countMines) => {\n    const newBoard = createBoard(rows, cols, countMines);\n    await dispatch({\n      type: \"reset\",\n      payload: { ...newBoard }\n    });\n  };\n\n  return {\n    state,\n    clickCell,\n    setSuperman,\n    endGame,\n    toggleFlag,\n    reveal,\n    createBoard: reset\n  };\n};\n","import { Queue } from \"./queue-service\";\nimport { getListOfNeighbors } from \"./get-list-of-neighbors\";\nimport { posToString } from \"./index.js\";\nexport const traverseFrom = (startIndexes, state) => {\n  const queue = Queue(); // a queue to manage BFS traverse\n  const visited = {}; // a list of all cells visited in the traverse\n  const {\n    clicked: cellsAlreadyVisible,\n    neighbors: countMinesAroundCells,\n    width,\n    height\n  } = state;\n  queue.push(startIndexes);\n  while (!queue.isEmpty()) {\n    const indexes = queue.pop();\n\n    const immediateNeighbors = getListOfNeighbors(indexes, height, width);\n    for (let i = 0; i < immediateNeighbors.length; i++) {\n      const [row, col] = immediateNeighbors[i];\n      const strIndexes = posToString(row, col);\n      visited[strIndexes] = 1;\n      if (\n        !countMinesAroundCells[strIndexes] &&\n        !cellsAlreadyVisible[strIndexes]\n      ) {\n        queue.push(strIndexes);\n      }\n    }\n  }\n\n  return visited;\n};\n","export const Queue = () => {\n  const _queue = [];\n  const _visited = {};\n  const push = obj => {\n    if (!_visited[obj]) {\n      _queue.push(obj);\n      _visited[obj] = obj;\n    }\n  };\n  const pop = () => {\n    return _queue.splice(0, 1)[0];\n  };\n\n  return {\n    pop,\n    push,\n    peek: () => _queue[_queue.length - 1],\n    getQueue: () => {\n      return _queue;\n    },\n    didVisit: obj => !!_visited[obj],\n    getVisited: () => _visited,\n    isEmpty: () => {\n      return _queue.length === 0;\n    }\n  };\n};\n","import React from \"react\";\n\nexport default props => {\n  const { status, flagged, countMines } = props;\n  const minesLeft = countMines - (Object.keys(flagged).length || 0);\n\n  return (\n    <div className=\"game-status-container\">\n      <div className=\"game-status\">\n        {`Flags Lefts : (${minesLeft}) `}\n        <text className={status.replace(\" \", \"_\")} style={{ marginLeft: 10 }}>\n          {status}\n        </text>\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport { Main } from \"./StyledComponents\";\nimport SettingsBox from \"./SettingsBox\";\nimport Board from \"./Board\";\nimport useBoard from \"../hooks/useBoard\";\nimport GameStatus from \"./GameStatus\";\n\nexport default () => {\n  const boardHook = useBoard();\n  const [loading, setLoading] = useState(false);\n  const {\n    state: { board }\n  } = boardHook;\n  return (\n    <Main>\n      <SettingsBox setLoading={setLoading} {...boardHook} />\n      <GameStatus {...boardHook.state} />\n      {board.length > 0 && <Board loading={loading} {...boardHook} />}\n    </Main>\n  );\n};\n","import React from \"react\";\nimport Main from \"./componenets/Main\";\nimport \"./App.css\";\n\nfunction App() {\n  return <Main />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}